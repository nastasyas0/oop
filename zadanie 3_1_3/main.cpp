/* Создать класс для объекта стек. Стек хранит целые числа. Имеет характеристики: наименование (строка, не более 10 символов) и размер (целое). 
Размер стека больше или равно 1. Функционал стека:
- добавить элемент и вернуть признак успеха (логическое);
- извлечь элемент (НЕ вывести!) и вернуть признак успеха (логическое);
- получить имя стека (строка);
- получить размер стека (целое);
- получить текущее количество элементов в стеке (целое). 
В классе определить параметризированный конструктор, которому передается имя стека и размер. При переполнении стека очередной элемент не добавлять
и определяется соответствующий признак успеха.
В основной программе реализовать алгоритм:
1. Ввести имя и размер для первого стека.
2. Создать объект первого стека.
3. Ввести имя и размер для второго стека.
4. Создать объект второго стека.
5. В цикле:
 5.1. Считывать очередное значение элемента.
 5.2. Добавлять элемент в первый стек, при переполнении завершить цикл.
 5.3. Добавлять элемент во второй стек, при переполнении завершить цикл.
6. Построчно вывести содержимое стеков. */


#include <iostream>
#include <string>
#include <iomanip>
#include "Stack.h"
using namespace std;

int main() {
  string name;
  int size, elem;
  cin >> name >> size;
  Stack stack1(name, size);
  cin >> name >> size;
  Stack stack2(name, size);
  
  do {
    cin >> elem;
  } while (stack1.PUSH(elem) && stack2.PUSH(elem));
  
  cout << stack1.GETNAME() << " " << stack1.GETSIZE() << endl;
  cout << stack2.GETNAME() << " " << stack2.GETSIZE() << endl; 
  cout << setw(15) << left << stack1.GETNAME() << setw(15) << left << stack2.GETNAME();
  
  int el1, el2;
  stack1.POP(el1);
  while (true) {
    cout << endl;
    if (stack2.POP(el2)) cout << setw(15) << right << el1;
    else {
      cout << setw(15) << right << el1;
      break;
    }
    if (stack1.POP(el1)) cout << setw(15) << right << el2;
    else {
      cout << setw(15) << right << el2;
      break;
    }
  }
  return 0;
}
