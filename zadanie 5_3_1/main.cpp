/* Полиморфизм в иерархии классов
Описать четыре класса которые последовательно наследуют друг друга, с номерами классов 1, 2, 3, 4. 
В каждом классе реализовать виртуальный метод с открытым доступом и одинаковым именем. 
Метод вычисляет значение многочлена степени номера класса и возвращает полученный результат.
Коэффициенты и переменная многочлена целочисленные.
В основной функции реализовать алгоритм, в котором использовать один указатель на объект класса. 
Алгоритм:
1. Объявление указателя на объект класса. 
2. Объявление четырех целочисленных переменных a1, a2, a3 a4, которые соответствуют коэффициентам многочлена (a1*x + a2*x*x + a3*x*x*x + a4*x*x*x*x). 
3. Объявление целочисленной переменной x, которая соответствует переменной многочлена. 
4. Ввод значения переменных a1, a2, a3 a4. 
5. Создание объекта класса 4 посредством параметризированного конструктора, передав в качестве аргументов a1, a2, a3 a4. 
Обеспечить передачу необходимых коэффициентов объектам согласно наследственности классов. 
6. Начало цикла 
 6.1. Реализовать ввод значения переменной x. 
 6.2. Если значение x равно нулю, то завершить цикл. 
 6.3. Иначе, реализовать ввод значения номера класса. 
 6.4. Согласно номеру класса вызвать метод вычисления многочлена посредством объекта, который соответствует номеру класса и результат вывести. 
7. Конец цикла. */

#include "Class4.h"
#include <iostream>
using namespace std;

int main() {
  Cl_4* p;
  int a1, a2, a3, a4, x, NumClass;
  cin >> a1 >> a2 >> a3 >> a4;
  p = new Cl_4(a1, a2, a3, a4);
  
  cout << "a1 = " << a1 << " a2 = " << a2 << " a3 = " << a3 << " a4 = " << a4;
 
  while(true) {
    cin >> x;
    if (x == 0) break;
    else cin >> NumClass;
    
    if (NumClass == 1) cout << endl << "Class 1" << " F( " << x << " ) = " << p->Cl_1::Calc(x); 
    
    else if (NumClass == 2) cout << endl << "Class 2" << " F( " << x << " ) = " << p->Cl_2::Calc(x);
    else if (NumClass == 3) cout << endl << "Class 3" << " F( " << x << " ) = " << p->Cl_3::Calc(x);
    else if (NumClass == 4) cout << endl << "Class 4" << " F( " << x << " ) = " << p->Cl_4::Calc(x);
  }
  return 0;
}
